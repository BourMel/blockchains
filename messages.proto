syntax = "proto3";
package protocol;

// Tries a really simple communication between 2 nodes
service Hello {
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// a participant asks if he can register to a node
service Register {
  rpc tryRegister (RegisterRequest) returns (RegisterReply) {}
}

// A node tries to contact its neighbour and gives its id
message HelloRequest {
  int32 id = 1;
}

// The node answers to the one that tried to contact it with its id
message HelloReply {
  int32 id = 1;
}

// A participant ask if he can register to a node
message RegisterRequest {
  int32 id = 1;
}

// A node can accept or reject a registration from a participant
message RegisterReply {
  bool registered = 1;
}

message Operation {
  string id = 1;
  string name = 2;
  repeated string args = 3;
}

message Block {
  string hash = 1;
  int32 depth = 2;
  repeated Operation operations = 3;
}

// participant
message NodeMember {
  string host = 1;
  int32 port = 2;
  int32 merit = 3;
}

message Node {
  string host = 1;
  int32 port = 2;
  repeated Node neighbors = 3;
  repeated Operation waitlist = 4; // operations
  repeated NodeMember members = 5;
  repeated Block chain = 6;
}
