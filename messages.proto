syntax = "proto3";
package protocol;

// Tries a really simple communication between 2 nodes
service Hello {
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// a participant asks if he can register to a node
service Register {
  rpc tryRegister (NodeMember) returns (Reply) {}
}

service Broadcast {
  rpc tryBroadcast (Message) returns (Empty) {}
}

service GetBlockchain {
  rpc askBlockchain (Depth) returns (Blockchain) {}
}

service GetUnicoins {
  rpc numberOfUnicoins (NodeMember) returns (Unicoins) {}
}

// A node tries to contact its neighbour and gives its id
message HelloRequest {
  string host = 1;
  int32 port = 2;
}

// The node answers to the one that tried to contact it with its id
message HelloReply {
  string host = 1;
  int32 port = 2;
}

// A node can accept or reject
message Reply {
  bool accepted = 1;
}

message Operation {
  string id = 1;
  string name = 2;
  int32 timestamp = 4;
  repeated string args = 3;
}

message Block {
  string hash = 1;
  int32 depth = 2;
  repeated Operation operations = 3;
  string creator_host = 5;
  int32 creator_port = 4;
}

message Blockchain {
  repeated Block block = 1;
}

// participant
message NodeMember {
  string host = 1;
  int32 port = 2;
  // int32 merit = 3;
}

message WaitingList {
  repeated Operation operations = 1;
}

message Node {
  string host = 1;
  int32 port = 2;
  repeated Node neighbors = 3;
  repeated Operation waitlist = 4; // operations
  repeated NodeMember members = 5;
  repeated Block chain = 6;
}

//length asked by a node when it wants a blockchain
message Depth {
  int32 depth = 1;
}

message Unicoins {
  float value = 1;
}

message Empty {}


message Text {
  string str = 1;
}

// for broadcasting, ...
message Message {
  string id = 1;
  string type = 2;
  string host = 3;
  int32 port = 4;
  oneof msg {
    Text text = 5;
    WaitingList WaitingList = 6;
  }
}
